name: transfer
description: Transfer code to the remote
inputs:
  environment:
    description: What environment you want to deploy
    type: string
  remote_dir:
    description: Path to the directory on the remote to transfer files to
    required: true
  local_dir:
    description: Path to the local directory to transfer files from
    required: false
    default: '.'
  ssh_host:
    description: SSH hostname
    required: true
  ssh_port:
    description: SSH port number
    required: false
    default: '22'
  ssh_user:
    description: SSH user
    required: true
  ssh_private_key:
    description: SSH private key
    required: true
  ssh_known_hosts:
    description: SSH hosts to trust
    required: true
  exclude_paths:
    description: Paths to exclude from transfer, as accepted by rsync --exclude
    required: false
runs:
  using: composite
  steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.ssh_private_key }}
        name: id_rsa
        known_hosts: ${{ inputs.ssh_known_hosts }}

    - name: "Create remote directory '${{ inputs.remote_dir }}' if it doesn't exist"
      env:
        COMMANDS: |
          cd /
          mkdir -p ${{ inputs.remote_dir }}; true
      uses: esign/.github/.github/actions/execute@development
      with:
        host: ${{ inputs.ssh_host }}
        port: ${{ inputs.ssh_port }}
        user: ${{ inputs.ssh_user }}
        commands: ${{ env.COMMANDS }}

    - name: "Compose rsync exclude flags"
      shell: bash
      run: |
        excludes=$(echo "${{ inputs.exclude_paths }}" | sed -r '1,$s/^(.+)$/--exclude \1/' | sed -z '1,$s/\r\n/ /g')
        echo "exclude_flags=$excludes" >> $GITHUB_ENV

    - name: "Upload local '${{ inputs.local_dir }}' to remote '${{ inputs.remote_dir }}'"
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -azr --delete ${{ env.exclude_flags }}
        path: ${{ inputs.local_dir }}
        remote_path: ${{ inputs.remote_dir }}
        remote_host: ${{ inputs.ssh_host }}
        remote_port: ${{ inputs.ssh_port }}
        remote_user: ${{ inputs.ssh_user }}
        remote_key: ${{ inputs.ssh_private_key }}

    - name: "Setup '${{ inputs.environment }}' environment"
      env:
        COMMANDS: |
          cd "${{ inputs.remote_dir }}"
          echo "[$(date +"%T")] Removing old codebase backup. This may take a minute ..."
          rm -rf ../previous

          echo "[$(date +"%T")] Removing /deploy/static..."
          rm -rf static

          mkdir ../persist 2>/dev/null; true

          rsync -a --ignore-existing ./storage/ ../persist/storage/

          rm -rf storage

          ln -fs ../persist/storage .

          mv ".env.${{ inputs.environment }}" .env
      uses: esign/.github/.github/actions/execute@development
      with:
        host: ${{ inputs.ssh_host }}
        port: ${{ inputs.ssh_port }}
        user: ${{ inputs.ssh_user }}
        commands: ${{ env.COMMANDS }}

    - name: Run npm install
      uses: esign/.github/.github/actions/node@development

    - name: Run composer install
      uses: esign/.github/.github/actions/php@development

    - name: "Create project symlinks"
      env:
        COMMANDS: |
          cd "${{ inputs.remote_dir }}"
          php artisan storage:link --relative
          php artisan route:clear
          php artisan cache:clear
          php artisan config:clear
          php artisan test
          echo "[$(date +"%T")] Copying codebase. This may take a minute..."
          rsync -a . ../new --exclude node_modules --exclude resources/assets

          rm -f ../www/index.html

          rm -r ../www

          mv -n ../src ../previous 2>/dev/null; true

          mv -n ../new ../src

          rm -f ../persist/storage/framework/views/*

          ln -fs ./src/public ../www

          cp .crontab ../.crontab
      uses: esign/.github/.github/actions/execute@development
      with:
        host: ${{ inputs.ssh_host }}
        port: ${{ inputs.ssh_port }}
        user: ${{ inputs.ssh_user }}
        commands: ${{ env.COMMANDS }}